import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import fetch_openml
import warnings
warnings.filterwarnings('ignore')

# Set style for better visualizations
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

print("=== TITANIC DATASET - DATA CLEANING AND EXPLORATORY DATA ANALYSIS ===\n")

# Load the Titanic dataset
print("1. LOADING DATASET")
print("-" * 50)
try:
    # Load Titanic dataset from OpenML
    titanic = fetch_openml('titanic', version=1, as_frame=True)
    df = titanic.frame
    print(f"Dataset loaded successfully!")
    print(f"Shape: {df.shape}")
except:
    # Alternative: Create sample data if OpenML fails
    print("Creating sample Titanic dataset...")
    np.random.seed(42)
    n_samples = 891
    
    df = pd.DataFrame({
        'survived': np.random.choice([0, 1], n_samples, p=[0.62, 0.38]),
        'pclass': np.random.choice([1, 2, 3], n_samples, p=[0.24, 0.21, 0.55]),
        'sex': np.random.choice(['male', 'female'], n_samples, p=[0.65, 0.35]),
        'age': np.random.normal(29.7, 14.5, n_samples),
        'sibsp': np.random.choice([0, 1, 2, 3, 4, 5], n_samples, p=[0.68, 0.23, 0.05, 0.02, 0.01, 0.01]),
        'parch': np.random.choice([0, 1, 2, 3, 4, 5, 6], n_samples, p=[0.76, 0.13, 0.08, 0.02, 0.004, 0.001, 0.001]),
        'fare': np.random.lognormal(2.5, 1.2, n_samples),
        'embarked': np.random.choice(['C', 'Q', 'S'], n_samples, p=[0.19, 0.09, 0.72])
    })
    
    # Add some missing values to simulate real data
    df.loc[np.random.choice(df.index, 177), 'age'] = np.nan
    df.loc[np.random.choice(df.index, 2), 'embarked'] = np.nan
    
    print(f"Sample dataset created with shape: {df.shape}")

print(f"\nDataset Info:")
print(f"Rows: {df.shape[0]}, Columns: {df.shape[1]}")
print(f"Memory usage: {df.memory_usage(deep=True).sum() / 1024:.2f} KB")

# 2. DATA OVERVIEW AND STRUCTURE
print("\n\n2. DATA OVERVIEW AND STRUCTURE")
print("-" * 50)
print("First 5 rows:")
print(df.head())

print("\nDataset Info:")
print(df.info())

print("\nBasic Statistics:")
print(df.describe())

print("\nData Types:")
print(df.dtypes)

# 3. DATA QUALITY ASSESSMENT
print("\n\n3. DATA QUALITY ASSESSMENT")
print("-" * 50)

# Missing values analysis
print("Missing Values Analysis:")
missing_data = df.isnull().sum()
missing_percent = (missing_data / len(df)) * 100
missing_df = pd.DataFrame({
    'Missing Count': missing_data,
    'Missing Percentage': missing_percent
}).sort_values('Missing Count', ascending=False)

print(missing_df[missing_df['Missing Count'] > 0])

# Duplicates
print(f"\nDuplicate rows: {df.duplicated().sum()}")

# 4. DATA CLEANING
print("\n\n4. DATA CLEANING")
print("-" * 50)

# Create a copy for cleaning
df_clean = df.copy()

# Handle missing values
print("Handling missing values...")

# Age: Fill with median based on passenger class and sex
if 'age' in df_clean.columns:
    df_clean['age'] = df_clean.groupby(['pclass', 'sex'])['age'].transform(
        lambda x: x.fillna(x.median())
    )

# Embarked: Fill with mode
if 'embarked' in df_clean.columns:
    df_clean['embarked'] = df_clean['embarked'].fillna(df_clean['embarked'].mode()[0])

# Fare: Fill with median based on passenger class
if 'fare' in df_clean.columns:
    df_clean['fare'] = df_clean.groupby('pclass')['fare'].transform(
        lambda x: x.fillna(x.median())
    )

# Create new features
print("Creating new features...")

# Family size
if 'sibsp' in df_clean.columns and 'parch' in df_clean.columns:
    df_clean['family_size'] = df_clean['sibsp'] + df_clean['parch'] + 1

# Age groups
if 'age' in df_clean.columns:
    df_clean['age_group'] = pd.cut(df_clean['age'], 
                                   bins=[0, 12, 18, 35, 60, 100], 
                                   labels=['Child', 'Teen', 'Young Adult', 'Adult', 'Senior'])

# Fare categories
if 'fare' in df_clean.columns:
    df_clean['fare_category'] = pd.qcut(df_clean['fare'], 
                                        q=4, 
                                        labels=['Low', 'Medium', 'High', 'Very High'])

# Is alone
if 'family_size' in df_clean.columns:
    df_clean['is_alone'] = (df_clean['family_size'] == 1).astype(int)

print(f"Dataset shape after cleaning: {df_clean.shape}")
print(f"Missing values after cleaning: {df_clean.isnull().sum().sum()}")

# 5. EXPLORATORY DATA ANALYSIS
print("\n\n5. EXPLORATORY DATA ANALYSIS")
print("-" * 50)

# Set up the plotting area
fig = plt.figure(figsize=(20, 24))

# 5.1 Survival Rate Overview
plt.subplot(4, 3, 1)
if 'survived' in df_clean.columns:
    survival_counts = df_clean['survived'].value_counts()
    survival_rate = df_clean['survived'].mean()
    
    plt.pie(survival_counts.values, labels=['Died', 'Survived'], autopct='%1.1f%%', 
            colors=['#ff6b6b', '#4ecdc4'])
    plt.title(f'Overall Survival Rate\n({survival_rate:.1%} Survived)')
else:
    plt.text(0.5, 0.5, 'Survival data not available', ha='center', va='center')
    plt.title('Survival Rate - Data Not Available')

# 5.2 Survival by Gender
plt.subplot(4, 3, 2)
if 'survived' in df_clean.columns and 'sex' in df_clean.columns:
    survival_by_sex = df_clean.groupby('sex')['survived'].agg(['count', 'sum', 'mean'])
    survival_by_sex.plot(kind='bar', y='mean', color=['#ff9999', '#66b3ff'])
    plt.title('Survival Rate by Gender')
    plt.ylabel('Survival Rate')
    plt.xlabel('Gender')
    plt.xticks(rotation=45)
    
    # Add value labels on bars
    for i, v in enumerate(survival_by_sex['mean']):
        plt.text(i, v + 0.02, f'{v:.1%}', ha='center')
else:
    plt.text(0.5, 0.5, 'Gender/Survival data not available', ha='center', va='center')
    plt.title('Survival by Gender - Data Not Available')

# 5.3 Survival by Passenger Class
plt.subplot(4, 3, 3)
if 'survived' in df_clean.columns and 'pclass' in df_clean.columns:
    survival_by_class = df_clean.groupby('pclass')['survived'].mean()
    survival_by_class.plot(kind='bar', color=['#gold', '#silver', '#cd853f'])
    plt.title('Survival Rate by Passenger Class')
    plt.ylabel('Survival Rate')
    plt.xlabel('Passenger Class')
    plt.xticks(rotation=0)
    
    # Add value labels
    for i, v in enumerate(survival_by_class):
        plt.text(i, v + 0.02, f'{v:.1%}', ha='center')
else:
    plt.text(0.5, 0.5, 'Class/Survival data not available', ha='center', va='center')
    plt.title('Survival by Class - Data Not Available')

# 5.4 Age Distribution
plt.subplot(4, 3, 4)
if 'age' in df_clean.columns:
    plt.hist(df_clean['age'].dropna(), bins=30, alpha=0.7, color='skyblue', edgecolor='black')
    plt.axvline(df_clean['age'].mean(), color='red', linestyle='--', label=f'Mean: {df_clean["age"].mean():.1f}')
    plt.axvline(df_clean['age'].median(), color='green', linestyle='--', label=f'Median: {df_clean["age"].median():.1f}')
    plt.title('Age Distribution')
    plt.xlabel('Age')
    plt.ylabel('Frequency')
    plt.legend()
else:
    plt.text(0.5, 0.5, 'Age data not available', ha='center', va='center')
    plt.title('Age Distribution - Data Not Available')

# 5.5 Survival by Age Group
plt.subplot(4, 3, 5)
if 'survived' in df_clean.columns and 'age_group' in df_clean.columns:
    survival_by_age = df_clean.groupby('age_group')['survived'].mean()
    survival_by_age.plot(kind='bar', color='lightcoral')
    plt.title('Survival Rate by Age Group')
    plt.ylabel('Survival Rate')
    plt.xlabel('Age Group')
    plt.xticks(rotation=45)
    
    # Add value labels
    for i, v in enumerate(survival_by_age):
        plt.text(i, v + 0.02, f'{v:.1%}', ha='center')
else:
    plt.text(0.5, 0.5, 'Age group/Survival data not available', ha='center', va='center')
    plt.title('Survival by Age Group - Data Not Available')

# 5.6 Fare Distribution
plt.subplot(4, 3, 6)
if 'fare' in df_clean.columns:
    plt.hist(df_clean['fare'].dropna(), bins=30, alpha=0.7, color='lightgreen', edgecolor='black')
    plt.axvline(df_clean['fare'].mean(), color='red', linestyle='--', label=f'Mean: ${df_clean["fare"].mean():.2f}')
    plt.axvline(df_clean['fare'].median(), color='green', linestyle='--', label=f'Median: ${df_clean["fare"].median():.2f}')
    plt.title('Fare Distribution')
    plt.xlabel('Fare ($)')
    plt.ylabel('Frequency')
    plt.legend()
else:
    plt.text(0.5, 0.5, 'Fare data not available', ha='center', va='center')
    plt.title('Fare Distribution - Data Not Available')

# 5.7 Family Size Distribution
plt.subplot(4, 3, 7)
if 'family_size' in df_clean.columns:
    family_size_counts = df_clean['family_size'].value_counts().sort_index()
    plt.bar(family_size_counts.index, family_size_counts.values, color='plum')
    plt.title('Family Size Distribution')
    plt.xlabel('Family Size')
    plt.ylabel('Count')
    
    # Add value labels
    for i, v in enumerate(family_size_counts.values):
        plt.text(family_size_counts.index[i], v + 5, str(v), ha='center')
else:
    plt.text(0.5, 0.5, 'Family size data not available', ha='center', va='center')
    plt.title('Family Size Distribution - Data Not Available')

# 5.8 Survival by Family Size
plt.subplot(4, 3, 8)
if 'survived' in df_clean.columns and 'family_size' in df_clean.columns:
    survival_by_family = df_clean.groupby('family_size')['survived'].mean()
    survival_by_family.plot(kind='bar', color='orange')
    plt.title('Survival Rate by Family Size')
    plt.ylabel('Survival Rate')
    plt.xlabel('Family Size')
    plt.xticks(rotation=0)
    
    # Add value labels
    for i, v in enumerate(survival_by_family):
        plt.text(i, v + 0.02, f'{v:.1%}', ha='center')
else:
    plt.text(0.5, 0.5, 'Family size/Survival data not available', ha='center', va='center')
    plt.title('Survival by Family Size - Data Not Available')

# 5.9 Embarked Port Distribution
plt.subplot(4, 3, 9)
if 'embarked' in df_clean.columns:
    embarked_counts = df_clean['embarked'].value_counts()
    plt.pie(embarked_counts.values, labels=embarked_counts.index, autopct='%1.1f%%',
            colors=['#ff9999', '#66b3ff', '#99ff99'])
    plt.title('Embarked Port Distribution')
else:
    plt.text(0.5, 0.5, 'Embarked data not available', ha='center', va='center')
    plt.title('Embarked Port Distribution - Data Not Available')

# 5.10 Survival by Embarked Port
plt.subplot(4, 3, 10)
if 'survived' in df_clean.columns and 'embarked' in df_clean.columns:
    survival_by_port = df_clean.groupby('embarked')['survived'].mean()
    survival_by_port.plot(kind='bar', color='lightblue')
    plt.title('Survival Rate by Embarked Port')
    plt.ylabel('Survival Rate')
    plt.xlabel('Embarked Port')
    plt.xticks(rotation=0)
    
    # Add value labels
    for i, v in enumerate(survival_by_port):
        plt.text(i, v + 0.02, f'{v:.1%}', ha='center')
else:
    plt.text(0.5, 0.5, 'Embarked/Survival data not available', ha='center', va='center')
    plt.title('Survival by Embarked Port - Data Not Available')

# 5.11 Correlation Heatmap
plt.subplot(4, 3, 11)
numeric_cols = df_clean.select_dtypes(include=[np.number]).columns
if len(numeric_cols) > 1:
    corr_matrix = df_clean[numeric_cols].corr()
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0, 
                square=True, fmt='.2f', cbar_kws={"shrink": .8})
    plt.title('Correlation Matrix')
else:
    plt.text(0.5, 0.5, 'Insufficient numeric data for correlation', ha='center', va='center')
    plt.title('Correlation Matrix - Insufficient Data')

# 5.12 Survival by Multiple Factors
plt.subplot(4, 3, 12)
if 'survived' in df_clean.columns and 'pclass' in df_clean.columns and 'sex' in df_clean.columns:
    survival_pivot = df_clean.pivot_table(values='survived', index='pclass', columns='sex', aggfunc='mean')
    sns.heatmap(survival_pivot, annot=True, fmt='.2f', cmap='RdYlBu', 
                cbar_kws={"shrink": .8})
    plt.title('Survival Rate by Class and Gender')
    plt.xlabel('Gender')
    plt.ylabel('Passenger Class')
else:
    plt.text(0.5, 0.5, 'Insufficient data for pivot analysis', ha='center', va='center')
    plt.title('Survival by Class and Gender - Data Not Available')

plt.tight_layout()
plt.show()

# 6. STATISTICAL INSIGHTS
print("\n\n6. STATISTICAL INSIGHTS")
print("-" * 50)

# Key statistics
if 'survived' in df_clean.columns:
    print(f"Overall Survival Rate: {df_clean['survived'].mean():.1%}")
    
    if 'sex' in df_clean.columns:
        print("\nSurvival by Gender:")
        gender_survival = df_clean.groupby('sex')['survived'].agg(['count', 'mean'])
        for gender in gender_survival.index:
            count = gender_survival.loc[gender, 'count']
            rate = gender_survival.loc[gender, 'mean']
            print(f"  {gender.title()}: {rate:.1%} ({count} passengers)")
    
    if 'pclass' in df_clean.columns:
        print("\nSurvival by Passenger Class:")
        class_survival = df_clean.groupby('pclass')['survived'].agg(['count', 'mean'])
        for pclass in class_survival.index:
            count = class_survival.loc[pclass, 'count']
            rate = class_survival.loc[pclass, 'mean']
            print(f"  Class {pclass}: {rate:.1%} ({count} passengers)")

if 'age' in df_clean.columns:
    print(f"\nAge Statistics:")
    print(f"  Mean age: {df_clean['age'].mean():.1f} years")
    print(f"  Median age: {df_clean['age'].median():.1f} years")
    print(f"  Age range: {df_clean['age'].min():.1f} - {df_clean['age'].max():.1f} years")

if 'fare' in df_clean.columns:
    print(f"\nFare Statistics:")
    print(f"  Mean fare: ${df_clean['fare'].mean():.2f}")
    print(f"  Median fare: ${df_clean['fare'].median():.2f}")
    print(f"  Fare range: ${df_clean['fare'].min():.2f} - ${df_clean['fare'].max():.2f}")

if 'family_size' in df_clean.columns:
    print(f"\nFamily Size Statistics:")
    print(f"  Mean family size: {df_clean['family_size'].mean():.1f}")
    print(f"  Most common family size: {df_clean['family_size'].mode()[0]}")
    if 'is_alone' in df_clean.columns:
        alone_pct = df_clean['is_alone'].mean()
        print(f"  Passengers traveling alone: {alone_pct:.1%}")

# 7. KEY FINDINGS AND PATTERNS
print("\n\n7. KEY FINDINGS AND PATTERNS")
print("-" * 50)

findings = []

if 'survived' in df_clean.columns and 'sex' in df_clean.columns:
    female_survival = df_clean[df_clean['sex'] == 'female']['survived'].mean()
    male_survival = df_clean[df_clean['sex'] == 'male']['survived'].mean()
    findings.append(f"Women had a significantly higher survival rate ({female_survival:.1%}) compared to men ({male_survival:.1%})")

if 'survived' in df_clean.columns and 'pclass' in df_clean.columns:
    class_survival = df_clean.groupby('pclass')['survived'].mean()
    findings.append(f"Higher passenger class correlated with better survival chances (Class 1: {class_survival[1]:.1%}, Class 2: {class_survival[2]:.1%}, Class 3: {class_survival[3]:.1%})")

if 'survived' in df_clean.columns and 'age_group' in df_clean.columns:
    child_survival = df_clean[df_clean['age_group'] == 'Child']['survived'].mean()
    if not pd.isna(child_survival):
        findings.append(f"Children had a higher survival rate ({child_survival:.1%}) following 'women and children first' protocol")

if 'survived' in df_clean.columns and 'family_size' in df_clean.columns:
    family_survival = df_clean.groupby('family_size')['survived'].mean()
    optimal_family_size = family_survival.idxmax()
    findings.append(f"Optimal family size for survival was {optimal_family_size} ({family_survival[optimal_family_size]:.1%} survival rate)")

if 'survived' in df_clean.columns and 'fare' in df_clean.columns:
    high_fare_survival = df_clean[df_clean['fare'] > df_clean['fare'].quantile(0.75)]['survived'].mean()
    low_fare_survival = df_clean[df_clean['fare'] <= df_clean['fare'].quantile(0.25)]['survived'].mean()
    findings.append(f"Higher fare passengers had better survival rates ({high_fare_survival:.1%} vs {low_fare_survival:.1%})")

for i, finding in enumerate(findings, 1):
    print(f"{i}. {finding}")

if not findings:
    print("Limited data available for comprehensive pattern analysis.")

print("\n" + "="*70)
print("ANALYSIS COMPLETE")
print("="*70)
print(f"Final dataset shape: {df_clean.shape}")
print(f"Features analyzed: {list(df_clean.columns)}")
print(f"Data quality: {((df_clean.shape[0] * df_clean.shape[1] - df_clean.isnull().sum().sum()) / (df_clean.shape[0] * df_clean.shape[1]) * 100):.1f}% complete")
